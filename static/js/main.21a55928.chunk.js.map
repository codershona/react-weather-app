{"version":3,"sources":["app_component/weather.component.js","app_component/form.component.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celcius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.21a55928.chunk.js","sourcesContent":["import React from \"react\";\n\n\n\nconst Weather = (props) => {\n\treturn (\n\t\t<div className=\"container text-light\">\n\t\t <div className=\"cards pt-4\">\n           <h1>\n           {props.city}\n           </h1>\n\n           <h5 className=\"py-4\">\n             <i className={`wi ${props.weatherIcon} display-1`}/>\n           </h5>\n\n           { props.temp_celcius ? (\n           \t<h1 className=\"py-2\">{props.temp_celcius}&deg;</h1>):null\n           }\n      \n       {/** showing max and min temparature **/}\n\n       {minmaxTemp(props.temp_min, props.temp_max)}\n\n       <h4 className=\"py-3\">{props.description}</h4>\n\n\n\n\t\t </div>\n\t\t </div>\n\n\n   );\n};\n\n\nfunction minmaxTemp(min, max) {\n\tif(min && max) {\n\t\treturn (\n\n\t\t\t\t<h3>\n\t\t  <span className=\"px-4\">{min}&deg;</span>\n            <br/>\n\t\t  <span className=\"px-4 px\">{max}&deg;</span>\n\n\t\t</h3>\n\n\t\t\t);\n\t}\n\n\n}\n\n\n\nexport default Weather;","import React from \"react\";\nimport \"./form.style.css\";\n\n\nconst Form = props => {\n   \n   return (\n      <div className=\"container\">\n        \n\n        <div>\n         {props.error ? error(): null}\n        </div>\n\n       <form onSubmit={props.loadweather}>\n\n          <div className=\"row\">         \n           <div className=\"col-md-3 offset-md-2\">\n             <input type=\"text\" \n             className=\"form-control\" \n             name=\"city\" \n             autoComplete=\"off\"\n             placeholder=\"Enter you City\"\n             />\n          \n          </div>\n          \n          <div className=\"col-md-3\">\n       <input \n       type=\"text\" \n       className=\"form-control\" \n       name=\"country\" autoComplete=\"off\"\n      placeholder=\"Enter you Country\"\n\n       />\n          \n          </div>\n          \n          <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\n         <button className=\"btn btn-warning\">SEARCH WEATHER</button>\n\n         </div>\n        </div>\n\n\n       </form>\n\n      </div>\n\n   \t);\n\n};\n\n\nfunction error() {\n\treturn (\n\t\t  <div className=\"alert alert-danger mx-5\" role=\"alert\">\n\t\t     PLEASE ENTER YOUR CITY OR COUNTRY\n\t\t  </div>\n\n\n\t\t);\n}\n\n\n\nexport default Form;","import React from \"react\";\nimport Weather from \"./app_component/weather.component\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Form from \"./app_component/form.component\";\n\n\n\n// api call api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_key = \"478cc3c9e7cd7db831d6f004db3d70f7\";\n\nclass App extends React.Component {\n constructor() {\n  super();\n  this.state = {\n    city: undefined,\n    country: undefined,\n    icon: undefined,\n    main: undefined,\n    celsius: undefined,\n    temp_max: undefined,\n    temp_min: undefined,\n    description: \"\",\n   \n    error: false\n\n  };\n\n  \n\n  this.weatherIcon = {\n    Thunderstorm: \"wi-thunderstorm\",\n    Drizzle: \"wi-sleet\",\n    Rain: \"wi-storm-showers\",\n    Snow: \"wi-snow\",\n    Atmosphere: \"wi-fog\",\n    Clear: \"wi-day-sunny\",\n    Clouds: \"wi-day-fog\"\n\n  };\n\n}\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n\n  }\n\n  get_WeatherIcon(icons, rangeID) {\n    switch(true) {\n    \n         case rangeID >= 200 && rangeID <= 232:\n      this.setState({icon: this.weatherIcon.Thunderstorm});\n      break;\n\n       \n          case rangeID >= 300 && rangeID <= 321:\n      this.setState({icon: this.weatherIcon.Drizzle});\n      break;\n\n           case rangeID >= 500 && rangeID <= 531:\n      this.setState({icon: this.weatherIcon.Rain});\n      break;\n\n\n         case rangeID >= 600 && rangeID <= 622:\n      this.setState({icon: this.weatherIcon.Snow});\n      break;\n\n\n         case rangeID >= 701 && rangeID <= 781:\n      this.setState({icon: this.weatherIcon.Atmosphere});\n      break;\n\n\n         case rangeID === 800:\n      this.setState({icon: this.weatherIcon.Clear});\n      break;\n\n\n         case rangeID >= 801 && rangeID <= 804:\n      this.setState({icon: this.weatherIcon.Clouds});\n      break;\n\n       default:\n          this.setState({icon: this.weatherIcon.Clouds}) \n\n\n    }\n  }\n\n\n\n getWeather = async (e) => {\n   \n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n\n    const country = e.target.elements.country.value;\n\n     if(city && country) {\n      const api_call = await fetch(\n    `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n\n  );\n\n   const response = await api_call.json();\n\n   console.log(response);\n\n   this.setState({\n    city: `${response.name}, ${response.sys.country}`,\n\n    celsius: this.calCelsius(response.main.temp),\n    temp_max: this.calCelsius(response.main.temp_max),\n    temp_min: this.calCelsius(response.main.temp_min),\n    description: response.weather[0].description,\n\n    error: false\n    \n    });\n\n   this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n\n   } else {\n    this.setState({error: true});\n   }\n\n };\n\n  render() {\n    return (\n  <div className=\"App\">\n\n      <Form loadweather={this.getWeather} error={this.state.error} />\n\n\n      \n      \n      <Weather \n      city={this.state.city} \n      country={this.state.country} \n      temp_celcius={this.state.celsius}\n      temp_max={this.state.temp_max}\n      temp_min={this.state.temp_min}\n      description={this.state.description}\n\n      weatherIcon ={this.state.icon}\n\n\n       />\n\n    </div>\n\n\n      );\n  }\n\n}\n\n\nexport default App ;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}